---
description: 
globs: 
alwaysApply: true
---
# Bulk Property Sorter

This VS Code extension provides commands to sort properties in various objects and interfaces.

## Project Structure

- `src/extension.ts` - Main extension code containing activation, event handling, and color tools implementation
- `src/utils.ts` - Utility functions for color parsing, conversion, and manipulation
- `src/parser.ts` - TypeScript parser for extracting properties and comments from code
- `src/sorter.ts` - Property sorting algorithm with comment preservation
- `src/types.ts` - Type definitions for parsed data structures
- `src/doc-checker.js` - Script to validate documentation completeness
- `test/` - Test files including sample color files and test suites
- `out/` - Compiled JavaScript output, does not include test files
- `images/` - Extension images including logo

## Development Workflow

1. Make changes to TypeScript files in `src/`
2. Run `npm run compile` to build
3. Press F5 in VS Code to debug
4. Run `npm run test` to execute tests
5. Use `npm run package` to create a VSIX file for distribution (automatically runs doc-checker)

## Testing Framework

**Use the proper VS Code test framework with `src/test/runTest.ts`:**

- **Test Runner**: `test/runTest.ts` - Uses direct Mocha execution for reliable test running
- **Test Suite**: `test/suite/` - Contains all test files using Mocha's TDD interface
- **Test Files**: Use `*.test.ts` naming convention in the `test/suite/` directory
- **Framework**: Mocha with TDD interface (`suite()`, `test()`, `setup()`, etc.)
- **Assertions**: Use Node.js built-in `assert` module

### Testing Best Practices:

- **DO**: Use `test/suite/*.test.ts` files with proper Mocha TDD syntax
- **DO**: Use `npm test` to run all tests via the configured test runner
- **DO**: Test core logic (parser, sorter) without VS Code API dependencies
- **DON'T**: Create custom test harnesses or standalone test files
- **DON'T**: Use VS Code APIs in unit tests unless absolutely necessary
- **DON'T**: Create files like `test-*.ts` in the src root - use the proper test suite structure

### Example Test Structure:
```typescript
import * as assert from 'assert';
import { MyClass } from '../../myModule';

suite('My Test Suite', () => {
    let instance: MyClass;

    setup(() => {
        instance = new MyClass();
    });

    test('should do something', () => {
        const result = instance.doSomething();
        assert.strictEqual(result, expectedValue);
    });
});
```

## Rules for Contribution

- Follow TypeScript best practices
- Maintain compatibility with VS Code API v1.83.0+
- Keep files modular and focused on single responsibilities
- Ensure tests cover new functionality using the proper test framework
- Follow existing code style and patterns
- Update documentation when adding features or making changes
    - This includes, but is not limited to: [CHANGELOG.md](mdc:CHANGELOG.md), [README.md](mdc:README.md), and [bulk-property-sorter.md](mdc:docs/bulk-property-sorter.md)

## Code Patterns

Use the VS Code Extension API for:
- Text document manipulation and caching
- Command registration and execution
- Configuration management
- Event handling for document changes

Use options interfaces instead of lists of parameters to functions where it makes sense.

## Testing

- Use the configured test runner in `src/test/runTest.ts` which executes all `*.test.ts` files in `src/test/suite/` using Mocha's TDD interface. Run tests with `npm test`.
- If you must create custom test harnesses, place them in `src/test`
